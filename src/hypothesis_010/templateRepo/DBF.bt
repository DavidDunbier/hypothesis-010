//------------------------------------------------
//--- 010 Editor v2.1.3 Binary Template
//
//      File: DBF.bt
//   Authors: A Norman
//   Version: 0.2
//   Purpose: Parses .dbf (database) format files.
//  Category: Database
// File Mask: *.dbf
//  ID Bytes: 
//   History: 
//   0.2   2016-01-29 SweetScape: Updated header for repository submission.
//   0.1   A Norman: Initial release.
//------------------------------------------------

string yearFrom1900 (char yy)
{
string s;
SPrintf(s, "%d", 1900 + yy);
return s;
}

struct DBF {
	struct HEADER {
		char version;
		struct DATE_OF_LAST_UPDATE {
			char yy ;
			char mm ;
			char dd ;
		} DateOfLastUpdate;
		int	numberOfRecords;
		short	lengthOfHeaderStructure;
		short	lengthOfEachRecord;
		char	reserved[2];
		char	incompleteTrasaction ;
		char	encryptionFlag ;
		int	freeRecordThread;
		int	reserved1[2];
		char	mdxFlag ;
		char	languageDriver ;
		short	reserved2;
	} header;
	struct FIELD {
		char fieldName[11];
		char fieldType;
		int  fieldDataAddress;
		char fieldLength ;
		char decimalCount ;
		short reserved;
		char  workAreaId ;
		short	reserved1;
		char	flags ;
		char	reserved2[7];
		char	indexFieldFlag ;
	} field[(header.lengthOfHeaderStructure-33)/sizeof(struct FIELD)];
	char	Terminator ;
	struct RECORD {
		char	deletedFlag;
		char	fields[header.lengthOfEachRecord-1];
	} record [ header.numberOfRecords ] ;
} dbf ;
		
		
		
	