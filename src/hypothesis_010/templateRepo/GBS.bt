//------------------------------------------------
//--- 010 Editor v11.0 Binary Template
//
//      File: GBS.bt
//   Authors: Devyatyi9
//   Version: 0.2
//   Purpose: Parser for Aonyx Software's OtterUI scene files https://github.com/ppiecuch/OtterUI
//  Category: Game
// File Mask: *.gbs
//  ID Bytes: 43 53 47 47 //CSGG
//   History: 
//   0.2   2020-11-13 Devyatyi9: Added syntax highlighting
//------------------------------------------------

typedef struct Header {
char GGSC_Header[4] ; //0x47475343
uint LayoutSize1 ;
float Data_Version ;
uint Scene_ID ;
uint Fonts_Count ;
uint Textures_Count ;
uint Sounds_Count ;
uint Views_Count ;
uint Messages_Count ;
uint UnknownData ;
uint LayoutSize2 ;
uint LayoutSize3 ;
uint LayoutSize4 ;
uint LayoutSize5 ;
};

Header hds ;

typedef enum  {
No=0,
Yes=1
} ImageGlyphFlg;// ;

typedef struct CharData {
wchar_t Char_Code[2] ;
ImageGlyphFlg igf ;
uint Char_X_Offs ;
uint Char_Y_Offs ;
uint Char_Width ;
uint Char_Height ;
uint Char_Top ;
uint Char_Advance ;
uint Char_LeftBearing ;
uint Char_Atlas_Index ;
} CharData;


string igfWrite (string &s)
{
    Printf(  "%s\n", s );
    return s;
}

//typedef struct FontTableHeader {
typedef struct FontTableHeader {
char GFNT[4] ; //0x47464E54
uint Font_Length ;
uint Font_ID ;
char Font_Name[64] ;
uint Font_Size ;
uint Atlas_Width ;
uint Atlas_Height ;
uint MaxTop ;
uint Atlas_Count ;
uint Chars_Count ;
//парс Char блоков
struct CharBlock chb <name="Chars Block",comment="Символы и картиночные глифы (значки)",open=suppress>;
struct CharBlock {
    local uint i;
    for (i = 0; i < Chars_Count; i++) {
            CharData chsd ;
            //Printf( chsd.ImageGlyphFlg.igf );
        };
};
} FontTableHeader;


//End of file marker
typedef uint EndfM; //0x12344321

//check header
if( hds.GGSC_Header != "CSGG" )
{
    Warning( "File is not a valid GBS file. Template stopped." );
    return -1;
}

string GetFntName(FontTableHeader &fnts)
{
    return fnts.Font_Name;
}
wstring GetCharName(CharData &chsd)
{
    //if 
    //Printf( igfWrite);
    return chsd.Char_Code;
}

// Define the file
local uint tag;
LittleEndian(); 
while( !FEof() )
{
    // Read a tag
    tag = ReadUInt( FTell() );

    if( tag == 0x47464E54 )
    {
        SetBackColor( cLtGray );
        FontTableHeader fnts ;
        //;
        //Printf( fnts.Font_Name + "\n" );
    }
//   else if( tag == 0x08074b50 )
//    {
//        SetBackColor( cLtGreen );
//        ZIPDATADESCR dataDescr;
//    }

     //else if( tag != 0x12344321 )
    //{   
        //Warning( "Warning! End of file marker not found." );
        //return 1;
    //}
    //else if( tag == 0x12344321 )
    //{   
        //SetBackColor( cLtBlack );
        //EndfM efm ;
    //} 

    else
    {
        Printf( "Done." );
        return 0;
    }

}