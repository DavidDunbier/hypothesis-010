//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: UMSE.bt
//   Authors: David Alvarez Perez
//   Version: 0.1
//   Purpose: Template for Universal Malware Sample Encryption
//  Category: Misc
// File Mask: *.umse
//  ID Bytes: 55 4D 53 45 //UMSE
//   History: 
//   0.1   2020-02-24 David Alvarez Perez: Initial version.
//------------------------------------------------
struct ENCRYPTED_SAMPLE {
    struct HEADER {
        char    magic[4] ;
        char    version[4] ;
        int     numRecordsDecTable ;
        int     numFileEntries ;
        int     authorNameLength ;
        char    authorNameValue[header.authorNameLength] ;
    } header ;

    struct DECRYPTION_TABLE {
        char    levelOfConfidentiality ;
        char    aesWrapped[256] ;
    } decryptionTable [ header.numRecordsDecTable ] ;

    struct ENTRY {
        int     size ;
        char    levelOfConfidentiality ;
        char    encryptedMessage[ entry.size ] ;
        int     numMetadata ;
        struct ENTRY_METADATA {
            char    tag[8] ;
            int     length ;
            char    value[ length ] ;
        } entry_meta [ entry. numMetadata ];
    } entry [ header.numFileEntries ] ;

    struct FILE_PROPERTIES {
        char    levelOfConfidentiality ;
        char    hashValue[ 32 ] ;
        int     numMetadata ;
        struct FILE_METADATA {
            char    tag[8] ;
            int     length ;
            char    value[ file_metadata.length ] ;
        } file_metadata [ file_properties.numMetadata ];
    } file_properties ;

    struct AUTHENTICATION_HEADER {
        int     authenticationLength  ;
        char    authentication[ authentication_header.authenticationLength ]  ;
    } authentication_header ;

    if(!FEof()) {
        struct RSA_PRIVATE_KEY {
            int     rsaPrivateKeyLength ;
            char    rsaPrivateKey[ rsa_private_key.rsaPrivateKeyLength ] ;
        } rsa_private_key ;
    }
} encryptedSample;


// Main

int isUMSE(void)
{
    local TFindResults countUmse;
	countUmse = FindAll("UMSE");
    return countUmse.count;
}


isUMSE();
if (isUMSE()==0)
{
	Printf("Keywords not found, not a UMSE file!\n");
	return;
}