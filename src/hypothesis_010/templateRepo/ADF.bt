//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//         File: ADF.bt
//      Authors: Volker Broemmel (VB)
//      Version: 1.0
//      Purpose: Detect block types of AmigaDOS disk images.
//     Category: Drives
//    File Mask: *.adf
//     ID Bytes:
//      History:
//   1.0 2019-02-xx VB: tested on HD disk images -- works.
//                      fixed ROOTBLOCK.bmflag datatype and all sec_type datatypes.
//   0.9 2019-02-07 VB: initial release
//
//      Remarks: use template at your own risk. Please make backups of your files first.
//
//Documentation:
//	The knowledge that has flowed in here came mainly
//	from the outstanding "The .ADF (Amiga Disk File) format FAQ"
//	of Laurent Cl√©vy (http://lclevy.free.fr/adflib/adf_info.html).
//
//	DiskType of boot block (first int32 of disk):
//		'D''O''S' + flags
//		flags = 3 least signifiant bits
//			set			clr
//		0	FFS			OFS
//		1	INTL ONLY	NO_INTL ONLY
//		2	DIRC&INTL	NO_DIRC&INTL
//	find further information in Laurent's FAQ.
//
//	Protection bit flags (File Header Block / User Directory Block):
//		Bit		If set, means
//		If MultiUser FileSystem : Owner
//		0		delete forbidden (D)
//		1		not executable (E)
//		2		not writable (W)
//		3		not readable (R)
//
//		4		is archived (A)
//		5		pure (reetrant safe), can be made resident (P)
//		6		file is a script (Arexx or Shell) (S)
//		7		Hold bit. if H+P (and R+E) are set the file can be made resident on first load (OS 2.x and 3.0)
//
//		8		Group (D) : is delete protected 
//		9		Group (E) : is executable 
//		10		Group (W) : is writable 
//		11		Group (R) : is readable 
//
//		12		Other (D) : is delete protected 
//		13		Other (E) : is executable 
//		14		Other (W) : is writable 
//		15		Other (R) : is readable 
//
//		30-16	reserved
//		31		SUID, MultiUserFS Only
//
// Program flow:
//	First off, the important info about the image file is gathered like 
//	block count and if it's a FFS or an OFS file system. Also the global
//	block info array is initialized which has the size of block count
//	and holds information on each block if it is a known block type or not.
//		Then the image file is analyzed almost sequentially	block by block. 
//  There are a few exceptions, though. Block-Types like
//	Bitmap-Block or FFS-Data-Block are hard or even impossible to tetect
//	by themselves. Thus certain collections are followed right away,
//	"breaking" the sequence:
//		* bm_pages collection in Root-Block
//		* data_blocks collection in File-Header-Block (FFS only)
//		* data_blocks collection in File-Extension-Block (FFS only)
//	Analyzing such a block again is avoided by marking it as KnownBlockType.
//	The sequence-loop skips those blocks.
//
//  Known issus:
//	*	Link-Blocks are not supported
//	*	Directory cache blocks (FFS) are not supported
//	This version is not tested on hard disk images.
//------------------------------------------------



/*
 * Prerequisites
 */
// Values in 68xxx CPU's are BigEndian
BigEndian();

// Define constants
const int BSIZE		= 512;			// sizeof a disk sector in bytes
const int64 FSIZE	= FileSize();
const int BCOUNT	= FSIZE/BSIZE;


// Define enums
enum BLOCKINFO {
	TBA					= 0,		// To be analyzed
	KnownBlockType		= 1,
	UnknownBlockType	= 2
};
local BLOCKINFO _blockInfo[BCOUNT];
_initBlockInfo();

// Define globals
local int isFFS = 0;				// determines if this is an OFS or FFS disk
_getFileSystemType();


/*
 *	Block structure definitions
 */
// Boot block structure
typedef struct {
	uchar		DiskType[3]				;
	uchar		flags					;
	ulong		chksum					;
	ulong		Rootblock				;
	uchar		Bootblock_code[1012]	;
} BOOTBLOCK ;

// Root block structure
typedef struct {
	ulong		type					;
	ulong		header_key				;
	ulong		high_seq				;
	ulong		ht_size					;
	ulong		first_data				;
	ulong		chksum					;
	ulong		ht[(BSIZE/4)-56]		;
	long		bm_flag					;
	ulong		bm_pages[25]			;
	ulong		bm_ext					;
	ulong		r_days					;
	ulong		r_mins					;
	ulong		r_ticks					;
	uchar		name_len				;
	char		diskname[30]			;
	uchar		UNUSED					;
	ulong		UNUSED					;
	ulong		UNUSED					;
	ulong		v_days					;
	ulong		v_mins					;
	ulong		v_ticks					;
	ulong		c_days					;
	ulong		c_mins					;
	ulong		c_ticks					;
	ulong		next_hash				;
	ulong		parent_dir				;
	ulong		extension				;
	long		sec_type				;
} ROOTBLOCK ;

// Bitmap block structure
typedef struct {
	ulong		chksum					;
	ulong		map[(BSIZE/4) - 1]		;
} BITMAPBLOCK ;

// Bitmap extension block (hard disk only)
typedef struct {
	ulong		map[(BSIZE/4) - 1]		;
	ulong		next					;
} BITMAPEXTENSIONBLOCK ;

// File header block structure
typedef struct {
	ulong		type					;
	ulong		header_key				;
	ulong		high_seq				;
	ulong		data_size				;
	ulong		first_data				;
	ulong		chksum					;
	ulong		data_blocks[(BSIZE/4)-56]	;
	ulong		UNUSED0					;
	ushort		UID						;
	ushort		GID						;
	ulong		protect					;
	ulong		byte_size				;
	uchar		comm_len				;
	uchar		comment[79]				;
	uchar		UNUSED1[12]				;
	ulong		days					;
	ulong		mins					;
	ulong		ticks					;
	uchar		name_len				;
	char		filename[30]			;
	uchar		UNUSED					;
	ulong		UNUSED					;
	ulong		real_entry				;
	ulong		next_link				;
	ulong		UNUSED3[5]				;
	ulong		hash_chain				;
	ulong		parent					;
	ulong		extension				;
	long		sec_type				;
} FILEHEADERBLOCK ;

// File extension block structure (sometimes also called "file list block")
typedef struct {
	ulong		type					;
	ulong		header_key				;
	ulong		high_seq				;
	ulong		UNUSED0					;
	ulong		UNUSED1					;
	ulong		chksum					;
	ulong		data_blocks[(BSIZE/4)-56]	;
	ulong		info[46]				;
	ulong		UNUSED2					;
	ulong		parent					;
	ulong		extension				;
	long		sec_type				;
} FILEEXTENSIONBLOCK ;

// OFS data block structure
typedef struct {
	ulong		type					;
	ulong		header_key				;
	ulong		seq_num					;
	ulong		data_size				;
	ulong		next_data				;
	ulong		chksum					;
	uchar		data[BSIZE-24]			;
} DATABLOCKOFS ; 

// FFS data block structure
typedef struct {
	uchar		data[BSIZE]				;
} DATABLOCKFFS ; 

// User directory block structure
typedef struct {
	ulong		type					;
	ulong		header_key				;
	ulong		UNUSED0[3]				;
	ulong		chksum					;
	ulong		ht[(BSIZE/4)-56]		;
	ulong		UNUSED1[2]				;
	ushort		UID						;
	ulong		GID						;
	ulong		protect					;
	ulong		UNUSED					;
	uchar		comm_len				;
	char		comment[79]				;
	uchar		UNUSED2[6]				;
	ulong		days					;
	ulong		mins					;
	ulong		ticks					;
	uchar		name_len				;
	char		dirname[30]				;
	uchar		UNUSED					;
	ulong		UNUSED3[2]				;
	ulong		next_link				;
	ulong		UNUSED4[5]				;
	ulong		hash_chain				;
	ulong		parent_dir				;
	ulong		extension				;
	long		sec_type				;
} USERDIRECTORYBLOCK ;



/*
 * helper functions
 */
// initialize block info array
void _initBlockInfo(){
	local int i;

	for( i = 0; i < BCOUNT; i++ ){
		_blockInfo[i] = TBA;
	}
	//_printBlockInfoArray();
}

// print block info for debugging purposes
void _printBlockInfoArray(){
	local int i, j;

	for ( i = 0; i < BCOUNT; i++ )
	{	
		if(i%16==0){Printf("\n");}
		Printf("%02x ",_blockInfo[i]);
	}
	Printf("\n\n");
}

// get file system type
void _getFileSystemType(){
	local uchar firstBytes[4];

	FSeek(0);
	ReadBytes( firstBytes, 0, 4 );

	if( ((firstBytes[3]) & (1<<(0))) ) { isFFS = 1; }
}

// get disk type flags string for comments
string _getDiskFlagsString( byte flags ) {
	string strFlags = "";

	if( ((flags) & (1<<(0))) ) {
		strFlags += "| FFS ";
	} else {
		strFlags += "| OFS ";
	}

	if( ((flags) & (1<<(1))) ) {
		strFlags += "| INTL ONLY ";
	} else {
		strFlags += "| NO_INTL ONLY ";
	}

	if( ((flags) & (1<<(2))) ) {
		strFlags += "| DIRC&INTL ";
	} else {
		strFlags += "| NO_DIRC&INTL ";
	}

	return strFlags;
}



/*
 * main functions
 */
// Loop through disk sectors sequentially
void _sequentialAproach() {
	local int blockNumber = 0;

	for ( blockNumber = 0; blockNumber < BCOUNT; blockNumber++ )
	{
		_detectBlockType( blockNumber );
	}
}

// get block type
void _detectBlockType( int blockNumber ){
	//check if block was already detected
	if( _blockInfo[blockNumber] == KnownBlockType ) {
		return; 
	}

	//prepare vars
	local uchar blockArray[BSIZE];

	//detect boot block
	//blockArray = _readBlock( blockNumber );
	FSeek( blockNumber * BSIZE );
	ReadBytes( blockArray, blockNumber * BSIZE, BSIZE );

	if ( blockArray[0] == 'D' && blockArray[1] == 'O' && blockArray[2] == 'S' &&
		 blockArray[4] != 'D' && blockArray[5] != 'O' && blockArray[6] != 'S' ) {	//detect root block
		BOOTBLOCK typebootblock;
		_blockInfo[0] = KnownBlockType;
		_blockInfo[1] = KnownBlockType; // boot block consists of 2 blocks on floppy disks (not on hard disks, though)
	}

	//get type ulongs of block
	local int type = ReadInt( blockNumber * BSIZE );
	local int sec_type = ReadInt( (blockNumber * BSIZE) + 508 );

	//detect different block types
	if ( type == 2 && sec_type == 1 ) {			//detect root block
		ROOTBLOCK typerootblock;
		_blockInfo[blockNumber] = KnownBlockType;

		//follow bitmap blocks
		_followBitmapBlocks( typerootblock.bm_pages );
	}

	if ( type == 2 && sec_type == -3 ) {		//detect file header
		FILEHEADERBLOCK typefileheaderblock;
		_blockInfo[blockNumber] = KnownBlockType;
		if( isFFS == 1 ) { _followDataBlocks( typefileheaderblock.data_blocks ); }
	}

	if ( type == 16 && sec_type == -3 ) {		//detect file extension block
		FILEEXTENSIONBLOCK typefileextensionblock;
		_blockInfo[blockNumber] = KnownBlockType;
		if( isFFS == 1 ) { _followDataBlocks( typefileheaderblock.data_blocks ); }
	}

	if ( isFFS == 0 && type == 8 ) {			//detect data block
		DATABLOCKOFS typedatablock;
		_blockInfo[blockNumber] = KnownBlockType;
	}

	if ( type == 2 && sec_type == 2 ) {			//detect user directory block
		USERDIRECTORYBLOCK typeuserdirectoryblock;
		_blockInfo[blockNumber] = KnownBlockType;
	}

	// no known block type
	if ( _blockInfo[blockNumber] != KnownBlockType ) { _blockInfo[blockNumber] = UnknownBlockType; }
}

// follow block chains
void _followBitmapBlocks( ulong bm_pages[] ){
	//prepare vars
	local uchar blockArray[BSIZE];
	local int i;

	for ( i = 0; i < sizeof(bm_pages)/4; i++ ){
		// skip iteration or even break out of the loop
		if ( bm_pages[i] == 0 || bm_pages[i] > BCOUNT -1 ) { continue; } 

		// mark bitmap block
		FSeek( bm_pages[i] * BSIZE );
		ReadBytes( blockArray, bm_pages[i] * BSIZE, BSIZE );
		BITMAPBLOCK typebitmapblock;
	}
	
	// TODO: here should follow a possible bitmap extension block(s) analysis for hard disk files
}

void _followDataBlocks( ulong data_blocks[] ){
	//prepare vars
	local uchar blockArray[BSIZE];
	local int i;

	for ( i = 0; i < sizeof(data_blocks)/4; i++ ){
		// skip iteration or even break out of the loop
		if ( data_blocks[i] == 0 || data_blocks[i] > BCOUNT -1 ) { continue; } 

		// mark bitmap block
		FSeek( data_blocks[i] * BSIZE );
		ReadBytes( blockArray, data_blocks[i] * BSIZE, BSIZE );
		DATABLOCKFFS typedatablockffs;
		_blockInfo[data_blocks[i]] = KnownBlockType;
	}
}



/*
 * template action
 */
Printf( "Filesize   : %d (%s)\n", FSIZE, FSIZE == 901120 ? "DD" : "HD" );
Printf( "Block Count: %d\n", BCOUNT );
Printf( "isFFS      : %d\n\n", isFFS );

Printf( "Start template\n" );

_sequentialAproach();

//_printBlockInfoArray();
Printf( "Template done\n\n" );