//------------------------------------------------
//--- 010 Editor v5.0 Binary Template
//
//      File: WIME_RES.bt
//   Authors: Aaron R. Willis and Pavel Reznicek
//   Version: 4.1
//   Purpose: Read War in Middle Earth (WIME) resource files.
//  Category: Game
// File Mask: *.res
//  ID Bytes: 10 00 00 00, 00 00 00 10
//   History: 
//   4.1   2021-01-11 PR: Aaron added as an author,
//                        found the meaning of the 1st word after 1C
//   4.0   2020-12-08 PR: FRML header support added
//------------------------------------------------

LittleEndian();
local ulong headerSize = ReadUInt(0);
if (headerSize < 0x10000) {
    LittleEndian(); 
} else { 
    BigEndian();
};


typedef struct RESOURCEFILEHEADER
{
    DWORD HeaderSize      ;
    DWORD DataSegmentSize ;
    DWORD DataSize        ;
    DWORD FileEndLength   ;
};

/*
typedef struct DATACHUNK
{
    ulong chunkSize ;
    uchar chunkData[chunkSize - IMAG_HEADER_SIZE];
};
*/

RESOURCEFILEHEADER Header ;

/* We skip reading of the data chunks for now;
let's read them after we know about each resource type */

/*
// Counting chunks...

local int chunkCount = 0;
local ulong nextChunkSize = 0;
nextChunkSize = ReadUInt(FTell());
FSeek(FTell() + 4);
//Printf("chunkCount: %d\n", chunkCount);
//Printf("Position: %d\n", FTell());
//Printf("nextChunkSize: %d\n", nextChunkSize);
while ((FTell() + nextChunkSize) <= Header.DataSegmentSize)
{
    FSeek(FTell() + nextChunkSize);
    nextChunkSize = ReadUInt(FTell());
    FSeek(FTell() + 4);
    chunkCount++;
    //Printf("chunkCount: %d\n", chunkCount);
    //Printf("Position: %d\n", FTell());
    //Printf("nextChunkSize: %d\n", nextChunkSize);
};

FSeek(Header.HeaderSize);

DATACHUNK DataChunks[chunkCount] ;
*/

FSeek(Header.DataSegmentSize);

RESOURCEFILEHEADER EndDataHeader;

WORD WordsAfterEndDataHeader[4] ;
WORD Word1C ;
//WORD WordsAfter1C[2] ;
WORD FileEndSizeWithoutEnding;
WORD Word2After1C ;

typedef struct RESOURCETYPE
{
    char ID[4] ;
	short MaxResourceIndex ;
    short Unknown06 ;
};

// Search for resource types
local char ID[5] = "----";
local int type_count = 0;
local int i;
local byte found = TRUE;
local byte cstr_found = FALSE;
local ushort cstr_count = 0;
local int64 pos = FTell();
while (found)
{
    for (i=0; i<4; i++)
    {
        ID[i] = ReadByte(
            pos + i
        );
    };
    //Printf("Resource ID Candidate: %s\n", ID);
    if ((ID == "CSTR") || (ID == "RTSC"))
	{
        cstr_found = TRUE;
        cstr_count = ReadShort(pos + 4) + 1;
	};
    found = 
       ((ID == "CSTR") || (ID == "RTSC") ||
        (ID == "IMAG") || (ID == "GAMI") ||
        (ID == "FRML") || (ID == "LMRF") ||
        (ID == "FONT") || (ID == "TNOF") ||
        (ID == "MMAP") || (ID == "PAMM") ||
        (ID == "CHAR") || (ID == "RAHC"));
	if (found)
  	{
        //Printf("Resource ID found: %s\n", ID);
    	type_count++;
		pos += 8;
    };
};

//Printf("Resource type count: %d\n", type_count);

RESOURCETYPE ResourceTypes[type_count];

// Let's count the total number of data chunks
local int chunk_count = 0;
for (i = 0; i < type_count; i++)
{
    chunk_count += ResourceTypes[i].MaxResourceIndex + 1;
};

typedef struct RESOURCEMAPENTRY
{
    //uchar ResourceMapEntry[12];
    ushort ResourceNumber ;
    ushort Unknown02 ;
    ushort ChunkLocation ;
    ubyte LocationMultiplier ;
    byte Unknown07 ;
    byte Unknown08 ;
    byte Unknown09 ;
    byte Unknown10 ;
    byte Unknown11 ;
};

RESOURCEMAPENTRY ResourceMap[chunk_count];

typedef struct CSTRMAPENTRY
{
    uchar CSTRMapEntry[8] ;
};


/*
local int cstrmdccount = 0;
for (pos = FTell(); pos < FileSize() - 2; pos+=8)
{
    cstrmdccount++;
};
*/

if (cstr_count > 0)
    CSTRMAPENTRY CSTRMap[cstr_count];

short Ending ;

//local const int IMAG_HEADER_SIZE = 22;

typedef struct IMAGHEADER{
    //uchar HeaderBytes[IMAG_HEADER_SIZE];
    ulong uncompressedChunkSize ;
    ubyte byte08                ;
    ubyte byte09                ;
    ubyte byte10                ;
    ubyte byte11                ;
    ubyte byte12                ;
    ubyte byte13                ;
    ubyte byte14                ;
    ubyte byte15                ;
    ubyte imagePlane            ;
    ushort resWidth             ;
    ubyte resHeight             ;
    ubyte resPal                ;
    ubyte byte21                ;
};

//Printf("Size of the IMAG header is: %d\n", sizeof(IMAGHEADER)); 

typedef struct IMAGCHUNK{
    ulong chunkSize             ;
    IMAGHEADER IMAGHeader;
    ubyte pixelData[chunkSize - sizeof(IMAGHeader)] ;
};

typedef struct FRMLCELLHEADER{
    ubyte cellID                ;
    ubyte unknown02             ;
    ubyte unknown03             ;
    ubyte cellWidth             ;
    ubyte cellHeight            ;
};

typedef struct FRMLHEADER{
    ulong uncompressedChunkSize ;
    ubyte byte08                ;
    ushort cellCount        ;
    //ubyte byte10              ;
    ubyte byte11                ;
    FRMLCELLHEADER FRMLKey[cellCount];
};

typedef struct FRMLCHUNK{
    ulong chunkSize ;
    FRMLHEADER FRMLHeader;
    ubyte chunkData[chunkSize - sizeof(FRMLHeader)] ;
};

typedef struct MMAPCHUNK{
    ulong chunkSize ;
    ubyte chunkData[chunkSize] ;
};

typedef struct CHARCHUNK{
    ulong chunkSize ;
    ubyte chunkData[chunkSize] ;
};

typedef struct FONTCHUNK{
    ulong chunkSize ;
    ubyte chunkData[chunkSize] ;
};

typedef struct CSTRCHUNK{
    ulong chunkSize ;
    char chunkData[chunkSize] ;
};

// Let's return back to the start and highlight the resources:
FSeek(Header.HeaderSize);

local uint res_count = 0;

for (i = 0; i < type_count; i++)
{
    ID = ResourceTypes[i].ID;
    //Printf("Resource type ID: %s\n", ID);
    res_count = ResourceTypes[i].MaxResourceIndex + 1;
    //Printf("Resource count: %d\n", res_count);
    switch (ID)
    {
        case "IMAG":
            IMAGCHUNK IMAGChunks[res_count] ;
            break;
        case "GAMI":
            IMAGCHUNK IMAGChunks[res_count] ;
            break;
        case "FRML":
            FRMLCHUNK FRMLChunks[res_count] ;
            break;
        case "LMRF":
            FRMLCHUNK FRMLChunks[res_count] ;
            break;
        case "MMAP":
            MMAPCHUNK MMAPChunks[res_count] ;
            break;
        case "PAMM":
            MMAPCHUNK MMAPChunks[res_count] ;
            break;
        case "CHAR":
            CHARCHUNK CHARChunks[res_count] ;
            break;
        case "RAHC":
            CHARCHUNK CHARChunks[res_count] ;
            break;
        case "FONT":
            FONTCHUNK FONTChunks[res_count] ;
            break;
        case "TNOF":
            FONTCHUNK FONTChunks[res_count] ;
            break;
        case "CSTR":
            CSTRCHUNK CSTRChunks[res_count] ;
            break;
        case "RTSC":
            CSTRCHUNK CSTRChunks[res_count] ;
            break;
        default:;
    };
    
};
