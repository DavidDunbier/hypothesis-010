//------------------------------------------------
//--- 010 Editor v6.0 Binary Template
//
//      File: OrCAD_LIB.bt
//   Authors: L. Potjewijd
//   Version: 1.4
//   Purpose: Analyse OrCad 3.20a library files. 
//  Category: CAD
// File Mask: *.lib
//  ID Bytes: 4C 49 42 52 41 52 59 20 4F 42 4A 45 43 54 //LIBRARY OBJECT
//   History: 
//   1.4   2019-04-16 L. Potjewijd: Corrected various structures, added meanings
//   1.3   2016-02-12 SweetScape Software: Updated header for repository submission.
//   1.21  2015-05-30 L. Potjewijd: Public release.
//------------------------------------------------

enum  YesNo  {No,Yes};
enum  Vtype  {END,LINE,CIRCLE,TEXT,ARC,FILL};
enum  ptype  {IN,I_O,OUT,OC,PAS,hiZ,OE,PWR};
enum  pquad  {II,IV};
enum  pside  {Left,Right,Top,Bottom};

typedef byte bit;          // just for readability

typedef struct sText
{   byte    Length ;
    if (Length > 0) char String[Length];
};

typedef struct fTxt (byte fixLen)
{   byte Length ;
    if (Length > 0) char String[Length];
    if ((fixLen > 0) && (fixLen > Length)) char filler[fixLen-Length];
};

typedef struct Coord
{   short   X;
    short   Y;
};

typedef struct  idxP
{   WORD    unknown ;   // new insight
    ushort  NameOffset ;
    ushort  DefOffset ;
    BigEndian();
    WORD    PrefixBitmap ;
    LittleEndian();
};

typedef struct Offsets
{   ushort  offsetLarge;
    ushort  offsetMedium;
    ushort  offsetSmall;
};

typedef struct PartDet
{   BigEndian();                    /*************************/
    WORD    raw ;    /*  this is to display   */
    LittleEndian();                 /*  the 'raw' bits, too  */
    FSkip (-2);                     /*************************/
    BitfieldLeftToRight();
    YesNo   hasConvDef  : 1;        // exact meaning is uncertain
    bit     bitE        : 1 ;
    bit     bitD        : 1 ;
    ubyte   subparts    : 5;        // maximum = 16
    YesNo   isGridArray : 1;
    bit     bit6        : 1 ;
    bit     bit5        : 1 ;
    bit     bit4        : 1 ;
    bit     bit3        : 1 ;
    YesNo   NormBitmap  : 1;
    YesNo   ConvBitmap  : 1;
    bit     bit0        : 1 ;
};

typedef struct  PinDet
{   BigEndian();                    /*************************/
    WORD    raw ;    /*  this is to display   */
    LittleEndian();                 /*  the 'raw' bits, too  */
    FSkip (-2);                     /*************************/
    BitfieldLeftToRight();
    YesNo   vertical    : 1 ;;
    byte    location    : 7;
    ptype   type        : 3;
    YesNo   isShort     : 1;
    YesNo   hasDOT      : 1;
    YesNo   hasCLK      : 1;
    bit     bit1        : 1 ;
    pquad   quadrant    : 1 ;
    local   pside side  = quadrant + (2 * vertical);
};

typedef struct DefPart
{   ushort  Length ;
    local   ushort  PartStart ;
    local   ushort  PartEnd ;
    local   ushort  NextPart ;
    PartStart = FTell();
    NextPart = PartStart + Length;
    short   sizeX ;
    short   sizeY ;
    PartDet PartDetails;
    short   PinsPerPart;
    if (PartDetails.NormBitmap == Yes) 
    {   WORD PinDefOffsetNorm ;
        Offsets NormalBitmap;
        PartEnd = NextPart - 1;
    }
    else
        if (PinsPerPart > 0) WORD PinDefStart ;
        else WORD NextPartOffset ;
    if (PartDetails.ConvBitmap == Yes)
    {   WORD PinDefOffsetConv ;
        Offsets ConvertBitmap;
    };
    sText   RefDesPrefix;
    typedef struct  DefPin
    {   PinDet  PinDetails;
        sText   Name;
        if (PartDetails.subparts > 0) 
        {   if (PartDetails.isGridArray == No)
                 byte  PinNumber[PartDetails.subparts] ;
            else sText PinNumber[PartDetails.subparts] ;
        };
    };
    if (PinsPerPart > 0)
    {   DefPin  NormalPin[PinsPerPart] ;
        if (PartDetails.ConvBitmap == Yes)
        {   j=0;
            while ((FTell() < NextPart) && (j < PinsPerPart))
            {   DefPin ConvertPin;
                j++;
            }
        }
        else j=PinsPerPart;
    };
    if (FTell() < NextPart)
    {   Printf("  Part %i has orphaned pin definition(s).\n",i);
        while (FTell() < NextPart) DefPin orphanPin;
    };
    if (j < PinsPerPart)
    {   Printf("  Part %i has %i missing pin definition(s).\n",i,PinsPerPart-j);
        FSkip (NextPart-FTell());
    };
    i++;
};

typedef struct BM
{   ushort  Length;
    ushort  offsetVectormap;
    byte    graphic[Length-2] ;
};

typedef struct VM
{   ushort  Length;
    typedef struct  VecDef
    {   Vtype   Type;
        switch (Type)
        {   case END    :   break;
            case LINE   :  {Coord   start;
                            Coord   finish; break;}
            case CIRCLE :  {Coord   center;
                            short   radius; break;}
            case TEXT   :  {Coord   origin;
                            ubyte   size;
                            sText   text; break;}
            case ARC    :  {Coord   center;
                            Coord   start;
                            Coord   finish;
                            short   radius; break;}
            case FILL   :  {Coord   location; break;}
            default     :  {Printf ("  Unknown vector type %i at 0x%X\n",Type,FTell());
                            return  -1;}
        };
    };
    do  VecDef Vector;
    while (Vector.Type != END);
};

void SORTlist (int start, int finish)  // Qsort routine
{   local   int     left  = start; 
    local   int     right = finish; 
    local   ushort  pivot = list[((start+finish)/2)];
    local   ushort  temp;
    do
    {   while (left <= right)
        {   while (list[left] < pivot) left++;
            while (list[right] > pivot) right--;
            if (left <= right) 
            {   temp=list[left]; list[left]=list[right]; list[right]=temp;
                left++; 
                right--;
            }; //if
        }; //while
        if (start < right) SORTlist(start,right);
        if (left < finish) SORTlist(left,finish);
    } while (left <= right);
}; 

// ***************************************************************************
LittleEndian();
// header section
struct HeaderDef
{   struct IDstring
    {   char    text[14];  // "LIBRARY OBJECT"
        char    term[3];   // #13, #10, #26
    } head;
    if (head.text != "LIBRARY OBJECT")
    {   Warning("\nFile is not an OrCAD library file.\n");
        Exit (-1);
    };
    byte    filler[8];
    ushort  IndexOffset;                // may be something else
} HEADER;

//index section
ushort  idxLength ;
local   int     entries ;
entries = idxLength / 8;
local   int     parts ;
parts = entries-1;
local   ushort  list[entries] ;
local   int     i ;
local   int     j ;
local   int     k ;
struct  IndexDef
{   idxP    Pointer[entries] ;
    ushort  NameTableLength ;
    sText   Name[entries] ;
} INDEX;
for ( k=0; k < entries; k++ ) 
    list[k]=INDEX.Pointer[k].DefOffset; // copy definition offsets
SORTlist (0,parts);
list[parts]=0;                          // mark end of list
for ( i=0; i < entries-1; i++ )         // hunt for doubles
{   j=i+1;
    while ((list[i]==list[j]) && (j <= parts))
        j++;                            // count doubles to move
    if ((j <= parts) && (j > i+1))
        while (j > i+1)                 // found doubles to shift
        {   for ( k=i+1; k < parts; k++ )
                list[k]=list[k+1];      // shift values 
            list[k]=0;                  // mark new end
            j--;
            parts--;                    // reduce search length
        };
};
Printf("\nIndex has %i entries, %i distinct parts.\n",entries,parts);

//  prefix section
struct  PrefixDef
{   DWORD   unknown[16] ;
    fTxt    LEFT(7)[16];
    fTxt    RIGHT(7)[16];
} PREFIX;

// part definitions
local   uint    PartSecStart ;
PartSecStart = FTell();
ushort          PartSectionLength ;
local   uint    PartSecEnd ;
PartSecEnd = FTell() + PartSectionLength - 1;
Printf ("Part section has %i bytes (0x%X-0x%X)\n",PartSectionLength,PartSecStart,PartSecEnd);
i=0;
while (FTell() < PartSecEnd) DefPart Part;

// bitmap section
local   uint    BitmapSecStart ;
BitmapSecStart = FTell();
ushort          BitmapSectionLength ;
local   uint    BitmapSecEnd ;
BitmapSecEnd = FTell() + BitmapSectionLength -1;
Printf ("Bitmap section has %i bytes (0x%X-0x%X)\n",BitmapSectionLength,BitmapSecStart,BitmapSecEnd);
while (FTell() < BitmapSecEnd) BM Bitmap;

// vector section
local   uint    VecSecStart ;
VecSecStart = FTell();
ushort          VectorSectionLength ;
local   uint    VecSecEnd ;
VecSecEnd = FTell() + VectorSectionLength -1;
Printf ("Vector section has %i bytes (0x%X-0x%X)\n",VectorSectionLength,VecSecStart,VecSecEnd);
while (FTell() < VecSecEnd) VM VectorSet;

// sheetpath index
local   uint    SheetIndexStart ;
SheetIndexStart = FTell();
Printf ("Sheetpath index starts at 0x%X\n",SheetIndexStart);
ushort   SheetpathIndex[entries];

// sheetpath section
ushort          SheetSectionLength;
local   uint    SheetSectionStart ;
SheetSectionStart = FTell();
local   uint    SheetSecEnd ;
SheetSecEnd = FTell() + SheetSectionLength -1;
Printf ("Sheetpath section starts at 0x%X\n",SheetSectionStart);
while (FTell() < SheetSecEnd) sText Sheetpath;

if (!FEof()) Printf("Found extra bytes at end of file.");